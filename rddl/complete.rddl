domain game {

	requirements = {
		reward-deterministic
	};

	types {
		pos : object;
	}; 

	pvariables {
		left(pos,pos) : { non-fluent, bool, default = false };
		right(pos,pos) : { non-fluent, bool, default = false };
		value(pos) : { non-fluent, int, default = 0 };
		at(pos) : { state-fluent, bool, default = false };
		a : { action-fluent, bool, default = false };
	};

	cpfs {
		at'(?x) = if(
			( a ^ exists_{?y : pos} ( at(?y) ^ left(?x,?y) )) | 
			(~a ^ exists_{?y : pos} ( at(?y) ^ right(?x,?y) ))
		) then KronDelta(true) else KronDelta(false);
	};

	reward = sum_{?x : pos} value(?x)*at(?x);

}
non-fluents game6 { 
	domain = game; 
	objects{
		pos : {p0, p1, p2, p3, p4, p5};
	};
	non-fluents{
		left(p0,p0);
		left(p0,p1);
		left(p1,p2);
		left(p2,p3);
		left(p3,p4);
		left(p4,p5);
		right(p1,p0);
		right(p2,p1);
		right(p3,p2);
		right(p4,p3);
		right(p5,p4);
		right(p5,p5);
		value(p0) = 1;
		value(p1) = 2;
		value(p2) = 1;
		value(p3) = 3;
		value(p4) = 4;
		value(p5) = 2;
	};
}
instance game_ins { 
	domain = game; 
	non-fluents = game6; 
	init-state{
		at(p0);
	};
	max-nondef-actions = 1;
	horizon = 10;
	discount = 1.0;
} 